name: Deploy to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test & Build

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Build frontend
        run: npm run build

      - name: Build backend
        run: npm run server:build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to VPS
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT || 22 }}
          script_stop: true
          script: |
            echo "=== Starting MessageReader Deployment ==="
            echo "Time: $(date)"
            
            cd /home/$USER/messageReader
            
            echo "=== Pulling latest code ==="
            git pull origin main
            
            echo "=== Loading environment variables ==="
            export $(cat /var/messagereader/env/.env.production | grep -v '^#' | xargs)
            
            echo "=== Verifying environment variables ==="
            echo "CLIENT_APP_URL=$CLIENT_APP_URL"
            echo "SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY:0:20}..."
            
            echo "=== Building Docker images ==="
            sudo -E docker compose build
            
            echo "=== Stopping old containers ==="
            sudo -E docker compose down
            
            echo "=== Starting new containers ==="
            sudo -E docker compose up -d
            
            echo "=== Waiting for services to be healthy ==="
            sleep 15
            
            echo "=== Checking container status ==="
            sudo docker compose ps
            
            echo "=== Displaying recent logs ==="
            sudo -E docker compose logs --tail=30
            
            echo "=== Testing backend health ==="
            curl -s http://localhost:4000/api/health && echo "" || echo "Health check pending..."
            
            echo "=== Deployment completed successfully ==="

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Deployment successful to https://cloudjeans-admin.ddns.net/'
            })

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ Deployment failed. Check workflow logs for details.'
            })
